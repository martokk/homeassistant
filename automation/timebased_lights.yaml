# Due to code limitation... turning off timebased scenese will also turn off light notifications. (Light notificaitons need LKS to work)
##########################################
########## TIMEBASED OPTIONS #############
##########################################
  - alias: timebased_light_scene_turn_off
    trigger:
      - platform: state
        entity_id: input_select.option_timebased_light_scene
        state: 'off'
    action:
      - service: homeassistant.turn_off
        entity_id: input_boolean.option_notify2_lights

  - alias: timebased_light_scene_turn_on
    trigger:
      - platform: state
        entity_id: input_select.option_timebased_light_scene
        state: 'on'
    action:
      - service: homeassistant.turn_on
        entity_id: input_boolean.option_notify2_lights

####################################
##### HOURLY BREATHE ###############
####################################

  - alias: hourly_flash_lights
    trigger:
    - platform: time
      minutes: 59
      seconds: 59
    condition:
    - condition: state
      entity_id: input_boolean.var_mike_home
      state: 'on'
    action:
    - condition: template
    # NOTE: flood_hours uses hour 24 instead of 0 (midnight) since alert is at 59 sec, we subtract 1 hour
      value_template: >
        {% set hour = states.sensor.time.state[:2] | int %}
        {% set flood_hours = [1,7,12,17,21,23]%}
        {% if ( hour + 1) in flood_hours %}
          false
        {% else %}
          true
        {% endif %}
    - service: script.notify2
      data:
        flash_color: "magenta"
        entity_id: group.overhead_lights

##########################################
######## TIME-BASED SCENE CHANGE #########
##########################################
### SUNRISE
  - alias: Timebased_Sunrise
    trigger:
      - platform: sun
        event: sunrise
        offset: "-00:25:00"
    condition:
      - condition: state
        entity_id: input_boolean.option_timebased_light_scene
        state: 'on'
      - condition: state
        entity_id: input_boolean.var_mike_home
        state: 'on'
      - condition: state
        entity_id: input_select.var_last_known_scene
        state: 'Off'
    action:
      service: scene.turn_on
      entity_id: scene.10m_day_le

### SUNSET (-3hr offset)
  - alias: Timebased_Day
    trigger:
      - platform: sun
        event: sunset
        offset: "-03:15:00"
    condition:
      - condition: state
        entity_id: input_boolean.option_timebased_light_scene
        state: 'on'
      - condition: state
        entity_id: input_boolean.var_mike_home
        state: 'on'
    action:
      service: scene.turn_on
      entity_id: scene.10m_day


### SUNSET
  - alias: Timebased_Sunset
    trigger:
      - platform: sun
        event: sunset
        offset: "-00:30:00"
    condition:
      - condition: state
        entity_id: input_boolean.option_timebased_light_scene
        state: 'on'
      - condition: state
        entity_id: input_boolean.var_mike_home
        state: 'on'
    action:
      service: scene.turn_on
      entity_id: scene.10m_night_cyan

### 1am - OFF
  - alias: Timebased_1am_off
    trigger:
      - platform: time
        after: "01:00:00"
    action:
    - condition: state
      entity_id: input_boolean.option_timebased_light_scene
      state: 'on'
    - condition: state
      entity_id: input_boolean.option_delay_timebased_off
      state: 'off'
    - service: scene.turn_on
      entity_id: scene.10m_off

### 2am - OFF
  - alias: Timebased_2am_off
    trigger:
      - platform: time
        after: "02:00:00"
    action:
    - condition: state
      entity_id: input_boolean.option_timebased_light_scene
      state: 'on'
    - condition: state
      entity_id: input_boolean.option_delay_timebased_off
      state: 'off'
    - service: scene.turn_on
      entity_id: scene.10m_off

### 3am - OFF
  - alias: Timebased_3am_off
    trigger:
      - platform: time
        after: "03:00:00"
    action:
    - service: homeassistant.turn_off
      entity_id: input_boolean.option_delay_timebased_off
    - condition: state
      entity_id: input_boolean.option_timebased_light_scene
      state: 'on'
    - service: scene.turn_on
      entity_id: scene.10m_off

##########################################
########## FLOOD LIGHTS ##################
##########################################

### 5:30am Red
  - alias: flood_530am
    trigger:
      - platform: time
        after: "05:29:59"
    action:
      - service: script.notify2
        data:
          flood_color: "red"
          delay: "00:00:10"
          next_scene: scene.day

### 7am Red
  - alias: flood_7am
    trigger:
      - platform: time
        after: "06:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          delay: "00:00:10"
          # next_scene: scene.chill

### 12pm
  - alias: flood_12pm
    trigger:
      - platform: time
        after: "11:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          delay: "00:00:10"
          # next_scene: scene.chill

### 5pm
  - alias: flood_5pm
    trigger:
      - platform: time
        after: "16:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          delay: "00:00:10"
          next_scene: scene.night_cyan

### 9pm
  - alias: flood_9pm
    trigger:
      - platform: time
        after: "20:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          delay: "00:00:10"
          next_scene: scene.night_blue

### 11pm
  - alias: flood_11pm
    trigger:
      - platform: time
        after: "22:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "red"
          delay: "00:00:10"
          next_scene: scene.night_red

### 12:30am
  - alias: flood_1230am
    trigger:
      - platform: time
        after: "00:29:59"
    action:
      - service: script.notify2
        data:
          flood_color: "red"
          delay: "00:00:10"
          next_scene: scene.night_computer_red
