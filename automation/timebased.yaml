# Due to code limitation... turning off timebased scenese will also turn off light notifications. (Light notificaitons need LKS to work)
##########################################
########## TIMEBASED OPTIONS #############
##########################################
  - alias: timebased_light_scene_turn_off
    trigger:
      - platform: state
        entity_id: input_select.option_timebased_light_scene
        state: 'off'
    action:
      - service: homeassistant.turn_off
        entity_id: input_boolean.option_notify2_lights

  - alias: timebased_light_scene_turn_on
    trigger:
      - platform: state
        entity_id: input_select.option_timebased_light_scene
        state: 'on'
    action:
      - service: homeassistant.turn_on
        entity_id: input_boolean.option_notify2_lights

####################################
##### HOURLY FLASH LIGHTS ##########
####################################

  - alias: hourly_flash_lights
    trigger:
    - platform: time
      minutes: 59
      seconds: 59
    condition:
    - condition: state
      entity_id: input_boolean.var_mike_home
      state: 'on'
    action:
    - condition: template
    # NOTE: flood_hours uses hour 24 instead of 0 (midnight) since alert is at 59 sec, we subtract 1 hour
      value_template: >
        {% set hour = states.sensor.time.state[:2] | int %}
        {% set flood_hours = [1,7,12,17,19,21,23]%}
        {% if ( hour + 1) in flood_hours %}
          false
        {% else %}
          true
        {% endif %}
    - service: script.notify2
      data:
        flash_color: "magenta"
        entity_id: group.timebased_hourly_flash_lights
        tts_sound: 'intercom_ds9.mp3'

##########################################
######## TIME-BASED SCENE CHANGE #########
##########################################
### SUNRISE
  - alias: Timebased_Sunrise
    trigger:
      - platform: time
        after: '05:30:00'
    condition:
      - condition: time
        before: '07:30:00'
      - condition: state
        entity_id: input_boolean.option_timebased_light_scene
        state: 'on'
      - condition: state
        entity_id: input_boolean.var_mike_home
        state: 'on'
      - condition: state
        entity_id: input_select.var_last_known_scene
        state: 'Off'
    action:
      service: scene.turn_on
      entity_id: scene.10m_day

### SUNSET (-3hr offset)
  - alias: Timebased_Day
    trigger:
      - platform: sun
        event: sunset
        offset: "-03:45:00"
    condition:
      - condition: state
        entity_id: input_boolean.option_timebased_light_scene
        state: 'on'
      - condition: state
        entity_id: input_boolean.var_mike_home
        state: 'on'
    action:
      service: scene.turn_on
      entity_id: scene.10m_day


### SUNSET
  - alias: Timebased_Sunset
    trigger:
      - platform: sun
        event: sunset
        offset: "-00:30:00"
    condition:
      - condition: state
        entity_id: input_boolean.option_timebased_light_scene
        state: 'on'
      - condition: state
        entity_id: input_boolean.var_mike_home
        state: 'on'
    action:
      service: scene.turn_on
      entity_id: scene.10m_night_cyan

### Entertainment Off - 12:30am + every 5 min
  - alias: Timebased_1230am_every_30m
    trigger:
      - platform: time
        minutes: '/10'
        seconds: 00
    condition:
      - condition: time
        after: "00:30:00"
        before: "04:00:00"
      - condition: state
        entity_id: input_boolean.option_delay_timebased_off
        state: 'off'
    action:
    - service: script.entertainment_center_turn_off

### 1am - OFF
  - alias: Timebased_1am_off
    trigger:
      - platform: time
        after: "01:00:00"
    action:
    - condition: state
      entity_id: input_boolean.option_delay_timebased_off
      state: 'off'
    - service: script.entertainment_center_turn_off
    - condition: state
      entity_id: input_boolean.option_timebased_light_scene
      state: 'on'
    - service: scene.turn_on
      entity_id: scene.10m_off

### 2am - OFF
  - alias: Timebased_2am_off
    trigger:
      - platform: time
        after: "02:00:00"
    action:
    - condition: state
      entity_id: input_boolean.option_delay_timebased_off
      state: 'off'
    - service: script.entertainment_center_turn_off
    - condition: state
      entity_id: input_boolean.option_timebased_light_scene
      state: 'on'
    - service: scene.turn_on
      entity_id: scene.10m_off

### 3am - OFF
  - alias: Timebased_3am_off
    trigger:
      - platform: time
        after: "03:00:00"
    action:
    - service: homeassistant.turn_off
      entity_id: input_boolean.option_delay_timebased_off
    - service: script.entertainment_center_turn_off
    - condition: state
      entity_id: input_boolean.option_timebased_light_scene
      state: 'on'
    - service: scene.turn_on
      entity_id: scene.10m_off

##########################################
########## FLOOD LIGHTS ##################
##########################################

### 5:30am Red
  - alias: flood_530am
    trigger:
      - platform: time
        after: "05:29:59"
    action:
      - service: script.notify2
        data:
          flood_color: "red"
          delay: "00:00:10"
          next_scene: scene.day
          tts_entity_id: media_player.vlc
          tts_sound: 'intercom_ds9.mp3'
          tts_message: "The time, is 5:30am"

### 7am Red
  - alias: flood_7am
    trigger:
      - platform: time
        after: "06:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          delay: "00:00:10"
          tts_entity_id: media_player.vlc
          tts_sound: 'intercom_ds9.mp3'
          tts_message: "The time, is 7am"

### 12pm
  - alias: flood_12pm
    trigger:
      - platform: time
        after: "11:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          delay: "00:00:10"
          tts_entity_id: media_player.vlc
          tts_sound: 'intercom_ds9.mp3'
          tts_message: "The time, is 12pm"

### 5pm
  - alias: flood_5pm
    trigger:
      - platform: time
        after: "16:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          delay: "00:00:10"
          next_scene: scene.day
          tts_entity_id: media_player.vlc
          tts_sound: 'intercom_ds9.mp3'
          tts_message: "The time, is 5pm"

### 7pm
  - alias: flood_7pm
    trigger:
      - platform: time
        after: "18:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          delay: "00:00:10"
          next_scene: scene.night_cyan
          tts_entity_id: media_player.vlc
          tts_sound: 'intercom_ds9.mp3'
          tts_message: "The time, is 7pm"

### 9pm
  - alias: flood_9pm
    trigger:
      - platform: time
        after: "20:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          delay: "00:00:10"
          next_scene: scene.night_blue
          tts_entity_id: media_player.vlc
          tts_sound: 'intercom_ds9.mp3'
          tts_message: "The time, is 9pm"

### 11pm
  - alias: flood_11pm
    trigger:
      - platform: time
        after: "22:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "red"
          delay: "00:00:10"
          next_scene: scene.night_red
          tts_entity_id: media_player.vlc
          tts_sound: 'intercom_ds9.mp3'
          tts_message: "The time, is 11pm"

### 12:30am
  - alias: flood_1215am
    trigger:
      - platform: time
        after: "00:14:59"
    action:
      - service: script.notify2
        data:
          flood_color: "red"
          delay: "00:00:10"
          next_scene: scene.night_computer_red
          tts_entity_id: media_player.vlc
          tts_sound: 'intercom_ds9.mp3'
          tts_message: "The time, is 12:15am. The TV will turn off in 15 minutes."
      - service: script.entertainment_center_turn_off


### 12:30am
  - alias: flood_1230am
    trigger:
      - platform: time
        after: "00:29:59"
    action:
      - service: script.notify2
        data:
          flood_color: "red"
          delay: "00:00:10"
          next_scene: scene.night_computer_red
          tts_entity_id: media_player.vlc
          tts_sound: 'intercom_ds9.mp3'
          tts_message: "The time, is 12:30am"
      - service: script.entertainment_center_turn_off

##########################################
########## MORNING LIGHTS ################
##########################################

### Turn ON Silver Lamp at 5:30am
  # - alias: timebased_530am_silver_lamp
  #   trigger:
  #     - platform: time
  #       after: "05:30:10"
  #   action:
  #     - service: light.turn_on
  #       entity_id: light.sonoff_silver_lamp

### Turn OFF Silver Lamp at 9:30am
  # - alias: timebased_930am_silver_lamp
  #   trigger:
  #     - platform: time
  #       after: "09:30:10"
  #     - platform: sun
  #       event: sunrise
  #       offset: "01:00:00"
  #   action:
  #     - service: light.turn_off
  #       entity_id: light.sonoff_silver_lamp
