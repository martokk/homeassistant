homeassistant:
  customize:
    script.repeat_last_message:
      emulated_hue: true
      emulated_hue_name: "Last Message"
      hidden: true

notify:
  - name: gmail
    platform: smtp
    server: smtp.gmail.com
    port: 587
    sender: "vhome.notifications@gmail.com"
    starttls: true
    username: vhome.notifications@gmail.com
    password: !secret gmail_password
    recipient: "vhome.notifications@gmail.com"

  - name: sms
    platform: smtp
    server: smtp.gmail.com
    port: 587
    sender: "vhome.notifications@gmail.com"
    starttls: true
    username: vhome.notifications@gmail.com
    password: !secret gmail_password
    recipient: "2622206437@mms.att.net"

  - name: mlo
    platform: smtp
    server: smtp.gmail.com
    port: 587
    sender: "vhome.notifications@gmail.com"
    starttls: true
    username: vhome.notifications@gmail.com
    password: !secret gmail_password
    recipient: "vill022@sync.mylifeorganized.net"

  - name: telegram
    platform: telegram
    api_key: !secret telegram_api_key
    chat_id: 343498992

  # - name: ios_iphone6s
  #   platform: ios
  #   target: 'ef95be9c-abb9-3494-b2ec-16837a198b2f'

telegram_bot:
  platform: polling
  api_key: !secret telegram_api_key
  allowed_chat_ids:
    - 343498992

sensor:
  - platform: mqtt
    state_topic: "device/tts/last_message"
    name: last_tts_message

script:
##########################################
##########  TEST NOTIFY2 #################
##########################################
  # notify2_test:
  #   sequence:
  #     - service: script.notify2
  #       data:
  #         flash_color: "cyan"
  #         entity_id: group.timebased_hourly_flash_lights
  #
  # notify2_telegram_test3:
  #   sequence:
  #   - service: script.notify2
  #     data:
  #       telegram_message: |
  #         message test line 1
  #         message test line 2
  #   - service: script.notify2
  #     data:
  #       telegram_url: http://sirocco.accuweather.com/nxssa_r1_h_500x620d/r1h/inxr1kmkea_h.gif
  #       caption: "Weather Photo Caption Test"
  #       disable_notification: true
  #   - service: script.notify2
  #     data:
  #       telegram_url: http://bitcoincharts.com/charts/chart.png?width=848&height=480&m=bitstampUSD&SubmitButton=Draw&r=2&i=5-min&c=0&s=&e=&Prev=&Next=&t=C&b=&a1=&m1=10&a2=&m2=25&x=0&i1=&i2=&i3=&i4=&v=1&cv=0&ps=0&l=0&p=0&
  #       caption: "Bitcoin Photo Caption Test"
  #       disable_notification: true


##########################################
##########  MAIN NOTIFY2 #################
##########################################
  notify2:
    alias: "vHome Notify2"
    sequence:
    - service: script.notify2_sms
      data_template:
        sms_message: "{{ sms_message }}"
    - service: script.notify2_email
      data_template:
        email_message: "{{ email_message }}"
    - service: script.notify2_mlo
      data_template:
        mlo_message: "{{ mlo_message }}"
    - service: script.notify2_telegram
      data_template:
        telegram_message: "{{ telegram_message }}"
        telegram_url: "{{ telegram_url }}"
        caption: "{{ caption }}"
        disable_notification: "{{ disable_notification }}"

    ### CONDITION: Resident is Home
    - condition: state
      entity_id: input_boolean.var_residents_home
      state: 'on'

    - service: script.notify2_chromecast
      data_template:
        chromecast_link: "{{ chromecast_link }}"
        chromecast_entity_id: "{{ chromecast_entity_id }}"
        chromecast_volume_level: "{{ chromecast_volume_level }}"
    - service: script.notify2_lights
      data_template:
        blink_color: "{{ blink_color }}"
        blink_color2: "{{ blink_color2 }}"
        breathe_color: "{{ breathe_color }}"
        flash_color: "{{ flash_color }}"
        flood_color: "{{ flood_color }}"
        flood_scene: "{{ flood_scene }}"
        delay: "{{ delay }}"
        entity_id: "{{entity_id}}"
        next_scene: "{{ next_scene }}"
    - service: script.notify2_tts
      data_template:
        tts_message: "{{ tts_message }}"
        tts_entity_id: "{{ tts_entity_id }}"
        tts_sound: "{{ tts_sound }}"
        tts_pause_delay: "{{ tts_pause_delay }}"

  #********** SMS Notifications ***************************************#
  notify2_sms:
    sequence:
    - service_template: >
        {% if sms_message %}
          {% if is_state('input_boolean.option_notify2_sms', 'on') %}
            notify.sms
          {% else %}
            script.notify2_do_nothing
          {% endif %}
        {% else %}
          script.notify2_do_nothing
        {% endif %}
      data_template:
        message: "{{ sms_message }}"


  #********** Email Notifications ***************************************#
  notify2_email:
    sequence:
    - service_template: >
        {% if email_message %}
          {% if is_state('input_boolean.option_notify2_email', 'on') %}
            notify.gmail
          {% else %}
            script.notify2_do_nothing
          {% endif %}
        {% else %}
          script.notify2_do_nothing
        {% endif %}
      data_template:
        message: "{{ email_message }}"


#********** MLO Notifications ***************************************#
  notify2_mlo:
    sequence:
    - service_template: >
        {% if mlo_message %}
          {% if is_state('input_boolean.option_notify2_mlo', 'on') %}
            notify.mlo
          {% else %}
            script.notify2_do_nothing
          {% endif %}
        {% else %}
          script.notify2_do_nothing
        {% endif %}
      data_template:
        title: "{{ mlo_message }}"
        message: ""


  #********** Telegram Notifications ***************************************#
  notify2_telegram:
    sequence:
    - service_template: >
        {% if telegram_message %}
          {% if is_state('input_boolean.option_notify2_telegram', 'on') %}
            telegram_bot.send_message
          {% else %}
            script.notify2_do_nothing
          {% endif %}
        {% else %}
          script.notify2_do_nothing
        {% endif %}
      data_template:
        message: "{{ telegram_message | replace('_', 'Ë·') }}"
        data:
          disable_notification: '{% if disable_notification %} {{ disable_notification }} {% endif %}'

    #*--------- Telegram Picture Notifications --------------*#
    - service_template: >
        {% if telegram_url %}
          {% if is_state('input_boolean.option_notify2_telegram', 'on') %}
            telegram_bot.send_photo
          {% else %}
            script.notify2_do_nothing
          {% endif %}
        {% else %}
          script.notify2_do_nothing
        {% endif %}
      data_template:
        url: '{{ telegram_url }}'
        caption: '{% if caption %} {{ caption }} {% endif %}'
        disable_notification: '{% if disable_notification %} {{ disable_notification }} {% else %} false {% endif %}'


  #********** Chromecast Media Notifications ***************************************#
  notify2_chromecast:
    sequence:

    # Stop media screensaver from playing before playing notification.
    - service_template: >
        {% if chromecast_link %}
          {% if not chromecast_entity_id %}
            {% set chromecast_entity_id = 'media_player.vtv_chromecast' %}
          {% endif %}
          {% if is_state('input_boolean.option_notify2_chromecast', 'on') %}
            {% if not is_state('binary_sensor.ps3', 'on') %}
              {% if is_state(chromecast_entity_id, 'playing') and states.media_player.vtv_chromecast.attributes.app_name | lower in states.input_select.array_chromecast_idle_apps | lower %}
                media_player.media_stop
              {% else %}
                script.notify2_do_nothing
              {% endif %}
            {% else %}
              script.notify2_do_nothing
            {% endif %}
          {% else %}
            script.notify2_do_nothing
          {% endif %}
        {% else %}
          script.notify2_do_nothing
        {% endif %}
    - delay: "00:00:03"

      # Set Chromecast Volume Level
    - service_template: >
        {% if chromecast_link and chromecast_volume_level %}
          {% if not chromecast_entity_id %}
            {% set chromecast_entity_id = 'media_player.vtv_chromecast' %}
          {% endif %}
          {% if not is_state('binary_sensor.ps3', 'on') %}
            {% if (not is_state(chromecast_entity_id, 'playing') and not is_state(chromecast_entity_id, 'paused')) or states.media_player.vtv_chromecast.attributes.app_name | lower in states.input_select.array_chromecast_idle_apps | lower %}
              script.set_entertainment_center_tv_volume
            {% else %}
              script.notify2_do_nothing
            {% endif %}
          {% else %}
            script.notify2_do_nothing
          {% endif %}
        {% else %}
          script.notify2_do_nothing
        {% endif %}
      data_template:
        volume_level: '{{ chromecast_volume_level }}'

    # Copy template code from above; replace 'media_player.stop_media' with 'media_player.play_media'
    - service_template: >
        {% if chromecast_link %}
          {% if not chromecast_entity_id %}
            {% set chromecast_entity_id = 'media_player.vtv_chromecast' %}
          {% endif %}
          {% if is_state('input_boolean.option_notify2_chromecast', 'on') %}
            {% if not is_state('binary_sensor.ps3', 'on') %}
              {% if (not is_state(chromecast_entity_id, 'playing') and not is_state(chromecast_entity_id, 'paused')) or states.media_player.vtv_chromecast.attributes.app_name | lower in states.input_select.array_chromecast_idle_apps | lower %}
                media_player.play_media
              {% else %}
                script.notify2_do_nothing
              {% endif %}
            {% else %}
              script.notify2_do_nothing
            {% endif %}
          {% else %}
            script.notify2_do_nothing
          {% endif %}
        {% else %}
          script.notify2_do_nothing
        {% endif %}
      data_template:
        entity_id: "{% if chromecast_entity_id %} {{ chromecast_entity_id }} {% else %} media_player.vtv_chromecast {% endif %}"
        media_content_type: video
        media_content_id: "{{ chromecast_link }}"
    - service: input_boolean.turn_on
      entity_id: input_boolean.var_notify2_15m_chromecast_on

  #********** Light Notifications ***************************************#
  notify2_lights:
    sequence:
    - service_template: >
        {% if is_state('input_boolean.option_notify2_lights', 'on') %}

          {% if flood_color %}
            {% if blink_color %}
              {% if blink_color2 %}
                script.flood_and_blink2
              {% else %}
                script.flood_and_blink
              {% endif %}
            {% elif breathe_color %}
              script.flood_and_breathe
            {% elif next_scene %}
              script.flood_and_change_scene
            {% else %}
              script.flood_light
            {% endif %}

          {% elif blink_color %}
            {% if blink_color2 %}
              script.blink2_light
            {% else %}
              script.blink_light
            {% endif %}

          {% elif breathe_color %}
            script.breathe_light

          {% elif flash_color %}
            script.flash_light

          {% elif flood_scene %}
            script.flood_scene

          {% else %}
            script.notify2_do_nothing

          {% endif %}

        {% else %}
          script.notify2_do_nothing
        {% endif %}
      data_template:
        blink_color: "{{ blink_color }}"
        blink_color2: "{{ blink_color2 }}"
        breathe_color: "{{ breathe_color }}"
        flash_color: "{{ flash_color }}"
        flood_color: "{{ flood_color }}"
        flood_scene: "{{ flood_scene }}"
        delay: "{{ delay }}"
        entity_id: "{% if entity_id %}{{entity_id}}{% else %}group.all_lights{% endif %}"
        next_scene: "{{ next_scene }}"


  #********** TTS Notificaiton - Pause Chromecast if playing ***************************************#
  notify2_tts:
    sequence:
    - service: script.turn_off
      entity_id: script.notify2
    - service_template: >
        {% if tts_message %}
          {% if is_state('input_boolean.option_notify2_tts', 'on') %}
            {% if is_state('media_player.vtv_chromecast', 'playing') or is_state('switch.air_conditioner', 'on') %}
              input_boolean.turn_on
            {% else %}
              script.notify2_do_nothing
            {% endif %}
          {% else %}
            script.notify2_do_nothing
          {% endif %}
        {% else %}
          script.notify2_do_nothing
        {% endif %}
      data_template:
        entity_id: input_boolean.var_tts_interupt

    #*--------- TTS Sound --------------*#
    - service_template: >
        {% if tts_message or tts_sound %}
          {% if is_state('input_boolean.option_notify2_tts', 'on') %}
            media_player.play_media
          {% else %}
            script.notify2_do_nothing
          {% endif %}
        {% else %}
          script.notify2_do_nothing
        {% endif %}
      data_template:
        entity_id: "{% if tts_entity_id %} {{ tts_entity_id }} {% else %} media_player.vlc {% endif %}"
        media_content_type: music
        media_content_id: "{% if tts_sound %}http://192.168.1.3:8123/local/sounds/{{ tts_sound }}{% else %} http://192.168.1.3:8123/local/sounds/intercom_ds9.mp3 {% endif %}"
    - delay: '00:00:01'

    #*--------- TTS Notificaiton --------------*#
    - service_template: >
        {% if tts_message %}
          {% if is_state('input_boolean.option_notify2_tts', 'on') %}
            tts.amazon_polly_say
          {% else %}
            script.notify2_do_nothing
          {% endif %}
        {% else %}
          script.notify2_do_nothing
        {% endif %}
      data_template:
        entity_id: "{% if tts_entity_id %} {{ tts_entity_id }} {% else %} media_player.vlc {% endif %}"
        message: '{{ tts_message }}'
    - service: mqtt.publish
      data_template:
        topic: "device/tts/last_message"
        payload: '{{ tts_message }}'
    - condition: state
      entity_id: input_boolean.var_tts_interupt
      state: 'on'
    - service: script.notify2_tts_resume
      data_template:
        tts_pause_delay: '{{ tts_pause_delay }}'


  #********** Do Nothing ***************************************#
  notify2_do_nothing:
    sequence:


  #********** TTS Notificaiton - Resume Chromecast if Paused ***************************************#
  notify2_tts_resume:
    sequence:
    - delay: >
        {% if tts_pause_delay %}
          {{ tts_pause_delay }}
        {% else %}
          00:00:03
        {% endif %}
    - service_template: >
        {% if states.media_player.vlc.state == 'playing' %}
          script.notify2_tts_resume_after_wait
        {% else %}
          script.notify2_do_nothing
        {% endif %}
    - condition: template
      value_template: "{{ states.media_player.vlc.state != 'playing' }}"
    - service: input_boolean.turn_off
      entity_id: input_boolean.var_tts_interupt

  notify2_tts_resume_after_wait:
    sequence:
    - wait_template: "{{ states.media_player.vlc.state != 'playing' }}"
    - service: input_boolean.turn_off
      entity_id: input_boolean.var_tts_interupt

  repeat_last_message:
    sequence:
    - service: script.notify2
      data_template:
        tts_message: '{{ states.sensor.last_tts_message.state }}'


automation:
  - alias: notify2_15m_chromecast_off
    trigger:
      - platform: state
        entity_id: input_boolean.var_notify2_15m_chromecast_on
        to: 'on'
        for:
          minutes: 15
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.var_notify2_15m_chromecast_on
      - condition: template
        value_template: '{{ states.media_player.vtv_chromecast.attributes.app_name | lower in states.input_select.array_chromecast_idle_apps | lower }}'
      - service: media_player.turn_off
        entity_id: media_player.vtv_chromecast



input_boolean:
##########################################
########## STORED VARIABLES ##############
##########################################
  var_notify2_15m_chromecast_on:
    initial: off


##########################################
########## OPTIONS #######################
##########################################
  option_notify2_sms:
    name: "SMS Notifications"
    initial: on

  option_notify2_email:
    name: "Email Notifications"
    initial: on

  option_notify2_mlo:
    name: "MLO Notifications"
    initial: on

  option_notify2_telegram:
    name: "Telegram Notifications"
    initial: on

  option_notify2_tts:
    name: "TTS Notifications"
    initial: on

  option_notify2_chromecast:
    name: "Chromecast Notifications"
    initial: on

  option_notify2_lights:
    name: "Lights Notifications"
    initial: on


##########################################
############### GROUPS ###################
##########################################
group:
  automation_notify2:
    entities:
      - automation.notify2_15m_chromecast_off

  script_notify2:
    entities:
      # - script.notify2_test
      # - script.notify2_telegram_test3
      - script.notify2
      - script.notify2_sms
      - script.notify2_email
      - script.notify2_mlo
      - script.notify2_telegram
      - script.notify2_chromecast
      - script.notify2_lights
      - script.notify2_tts
      - script.notify2_do_nothing
      - script.notify2_tts_resume
      - script.repeat_last_message

  homeassistant_notify2:
    entities:
      - input_boolean.var_notify2_15m_chromecast_on

  options_notify2:
    name: "Notify2 Notifications"
    entities:
      - input_boolean.option_notify2_sms
      - input_boolean.option_notify2_email
      - input_boolean.option_notify2_mlo
      - input_boolean.option_notify2_telegram
      - input_boolean.option_notify2_tts
      - input_boolean.option_notify2_chromecast
      - input_boolean.option_notify2_lights
