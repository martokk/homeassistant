##########################################
########## COMPONENTS ####################
##########################################
# sensor:

#-----------------------------------------------------#

automation:
##########################################
########## TIMEBASED SCENE ###############
##########################################
  # Set input_text.var_timebased_scene
  - alias: set_timebased_scene
    trigger:
      - platform: time
        minutes: 00
        seconds: 00
      - platform: homeassistant
        event: start
    action:
    - service: input_text.set_value
      data_template:
        entity_id: input_text.var_timebased_scene
        value: >
          {% set now_hour = states.sensor.now_hour.state | int %}
          {% for item in states.input_select.config_array_timebased_scene_times.attributes.options %}

            {% set item_split = item.split(", ") %}
            {% set timebased_hour = item_split[0] | int %}
            {% set next_timebased_hour = states.input_select.config_array_timebased_scene_times.attributes.options[loop.index - loop.length ].split(", ")[0] | int %}
            {% set scene_name = item_split[1] | string  %}

            {# Check Hour #}
            {% if now_hour >= timebased_hour and now_hour < next_timebased_hour %}
              {{ scene_name }}
            {% endif %}

          {% endfor %}


  # Flood Lights & Change Scene
  - alias: timebased_flood_lights_and_change_scene
    trigger:
      - platform: state
        entity_id: input_text.var_timebased_scene
    condition:
      - condition: template
        value_template: '{{ trigger.from_state.state != "" }}'
    action:
      - service: script.notify2
        data_template:
          timebased_lights: "true"
          flood_color: "magenta"
          entity_id: group.timebased_flood_lights
          delay: "00:00:10"
          next_scene: '{{ states.input_text.var_timebased_scene.state }}'
          tts_entity_id: group.config_tts_devices
          tts_sound: 'st_notifications/st_notification2.wav'
          tts_message: "The time, is {% if states.sensor.now_hour.state | int > 12 %}{{ states.sensor.now_hour.state | int - 12 }}{% else %}{{ states.sensor.now_hour.state | int }}{% endif %} {% if states.sensor.now_hour.state | int > 11 %}pm{% else %}am{% endif %}."

    # NOTE: Since input_text doesn't yet have restore functionality, we have to call scene2 in order to initally set the LKS.
    # TODO: When restore is added, ONLY run this if any of the room LKS are null/empty so that we can use the restored value instead.
  - alias: startup_timebased_scene
    trigger:
      - platform: state
        entity_id: input_text.var_timebased_scene
    condition:
      - condition: template
        value_template: '{{ trigger.from_state.state == "" }}'
    action:
    - service: script.scene2
      data_template:
        scene_name: '{{ states.input_text.var_timebased_scene.state }}'
        transition: 1

##########################################
########## NOTIFICATIONS #################
##########################################
  - alias: timebased_hourly_flash_lights
    trigger:
    - platform: time
      minutes: 00
      seconds: 02
    condition:
    - condition: state
      entity_id: script.flood_and_change_scene
      state: 'off'
    - condition: state
      entity_id: script.flood_light
      state: 'off'
    - condition: state
      entity_id: script.notify2
      state: 'off'
    action:
    - service: script.notify2
      data:
        flash_color: "magenta"
        entity_id: group.timebased_hourly_flash_lights
        tts_sound: 'st_notifications/st_notification2.wav'

##########################################
########## FLOOD LIGHTS RED ##############
##########################################
  - alias: timebased_flood_lights_red
    trigger:
      - platform: time
        at: "22:59:58"
      - platform: time
        at: "23:59:58"
    action:
      - service: script.notify2
        data_template:
          timebased_lights: "true"
          flood_color: "red"
          entity_id: group.timebased_flood_lights
          delay: "00:00:05"
          tts_entity_id: group.config_tts_devices
          tts_sound: 'st_notifications/st_notification2.wav'
          tts_message: "{{ states.sensor.now_hour.state | int }} {% if states.sensor.now_hour.state | int > 11 %}pm{% else %}am{% endif %}."
          tts_pause_delay: '00:00:00'

##########################################
########## AUTOMATIONS ###################
##########################################
### SUNRISE
  - alias: timebased_scene_sunrise_transition
    trigger:
    - platform: time
      minutes: 49
      seconds: 00
    condition:
      - condition: template
        value_template: >
          {% for item in states.input_select.config_array_timebased_scene_times.attributes.options %}
            {% set item_split = item.split(", ") %}
            {% set timebased_hour = item_split[0] | int %}
            {% set scene_name = item_split[1] | string  %}
            {# Check Scene Name #}
            {% if scene_name == "day" %}
              {# Check Hour #}
              {% if states.sensor.now_hour.state | int  == timebased_hour | int - 1 %}
                true
              {% endif %}
            {% endif %}
          {% endfor %}
      - condition: state
        entity_id: input_text.option_notify2_timebased_lights
        state: 'on'
    action:
    - service: script.scene2
      data:
        scene_name: 'day'
        transition: 600 #10m

#-----------------------------------------------------#

script:
##########################################
########## SCRIPTS #######################
##########################################
  timebased_scene:
    sequence:
    - service: script.scene2
      data_template:
        scene_name: '{{ states.input_text.var_timebased_scene.state }}'
        transition: 1

#-----------------------------------------------------#

# input_boolean:
##########################################
########## BACKEND #######################
##########################################
input_text:
  var_timebased_scene:
    # TODO: Check if this restores after restart
    initial: ""

##########################################
########## OPTIONS #######################
##########################################

##########################################
########## CONFIG ########################
##########################################

#-----------------------------------------------------#

# homeassistant:
#   customize:
##########################################
########## EMULATED HUE ##################
##########################################
    # input_boolean.template:
    #   emulated_hue: true
    #   emulated_hue_name: "Template Name"

#-----------------------------------------------------#

group:
##########################################
############### GROUPS ###################
##########################################

##########################################
############### AUTO-GROUPS ##############
##########################################
  automation_timebased_lights:
    entities:
      - automation.timebased_hourly_flash_lights
      - automation.set_timebased_scene
      - automation.timebased_flood_lights_and_change_scene
      - automation.timebased_flood_lights_red
      - automation.timebased_scene_sunrise_transition
      - automation.startup_timebased_scene

  backend_timebased_lights:
    entities:
      - input_text.var_timebased_scene

#   hidden_timebased_lights:
#     entities:
#       - input_boolean.

#   options_timebased_lights:
#     entities:
#       - input_boolean.

  script_timebased_lights:
    entities:
      - script.timebased_scene

#   sensor_timebased_lights:
#     entities:
#       - sensor.
