homeassistant:
  customize:
    script.all_off:
      emulated_hue: true
      emulated_hue_name: "Everything"

automation:
##########################################
########## NOTIFICATIONS #################
##########################################

#********** Hourly Flash Lights ***************************************#
  - alias: hourly_flash_lights
    trigger:
    - platform: time
      minutes: 00
      seconds: 00
    condition:
    - condition: state
      entity_id: input_boolean.var_mike_home
      state: 'on'
    - condition: state
      entity_id: script.flood_and_change_scene
      state: 'off'
    - condition: state
      entity_id: script.flood_light
      state: 'off'
    - condition: state
      entity_id: script.flood_scene
      state: 'off'
    action:
    - service: script.notify2
      data:
        flash_color: "magenta"
        entity_id: group.timebased_hourly_flash_lights
        tts_sound: 'st_notifications/st_notification2.wav'




##########################################
########## TIMEBASED SCENE CHANGE ########
##########################################
### SUNRISE
  - alias: timebased_530am
    trigger:
      - platform: time
        at: '05:30:00'
    action:
    - service: script.scene2
      data:
        rooms: 'all'
        scene_name: 'day'
        transition: 600
    - service: input_select.select_option
      data:
        entity_id: input_select.var_lks_timebased
        option: 'day'

### SUNSET (-3hr offset)
  - alias: timebased_day
    trigger:
      - platform: sun
        event: sunset
        offset: "-03:45:00"
    action:
    - service: script.scene2
      data:
        rooms: 'all'
        scene_name: 'day'
        transition: 600
    - service: input_select.select_option
      data:
        entity_id: input_select.var_lks_timebased
        option: 'day'

### Turn All Off - 12:30am + every 30 min
  - alias: timebased_12am_every_15m
    trigger:
      - platform: time
        minutes: '/15'
        seconds: 35
    condition:
      - condition: time
        after: "00:00:00"
        before: "05:00:00"
      - condition: state
        entity_id: input_boolean.var_desktop_computer_on
        state: 'off'
      - condition: state
        entity_id: input_boolean.option_delay_timebased_off
        state: 'off'
      - condition: state
        entity_id: input_boolean.var_ps3_on
        state: 'off'
      - condition: template
        value_template: >-
          {% if states.media_player.vtv_chromecast.state != "playing" %}
            true
          {%else%}
            {% if states.media_player.vtv_chromecast.attributes.app_name | lower in states.input_select.array_chromecast_idle_apps | lower %}
              true
            {%else%}
              false
            {%endif%}
          {%endif%}
      - condition: state
        entity_id: binary_sensor.entertainment_center_motion_sensor
        state: 'off'
    action:
      - service: script.entertainment_center_turn_off
      - delay: "00:00:30"
      - service: script.scene2
        data:
          rooms: 'all'
          scene_name: 'off'
          transition: 600
      - service: input_select.select_option
        data:
          entity_id: input_select.var_lks_timebased
          option: 'off'


### 3am - Reset Option - Delay Timebased until 3am
  - alias: timebased_3am_off
    trigger:
      - platform: time
        at: "03:00:00"
    action:
    - service: homeassistant.turn_off
      entity_id: input_boolean.option_delay_timebased_off
    - service: script.entertainment_center_turn_off



##########################################
########## FLOOD LIGHTS ##################
##########################################

### 5:30am Red
  - alias: flood_530am
    trigger:
      - platform: time
        after: "05:29:59"
    action:
      - service: script.notify2
        data:
          flood_color: "red"
          entity_id: group.timebased_flood_lights
          delay: "00:00:10"
          next_scene: day
          tts_entity_id: group.tts_devices
          tts_sound: 'st_notifications/st_notification2.wav'
          tts_message: "The time, is 5:30am"

### 7am Red
  - alias: flood_7am
    trigger:
      - platform: time
        at: "06:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          entity_id: group.timebased_flood_lights
          delay: "00:00:10"
          tts_entity_id: group.tts_devices
          tts_sound: 'st_notifications/st_notification2.wav'
          tts_message: "The time, is 7am. Get ready to leave in 30 minutes."

### 12pm
  - alias: flood_12pm
    trigger:
      - platform: time
        after: "11:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          entity_id: group.timebased_flood_lights
          delay: "00:00:06"
          tts_entity_id: group.tts_devices
          tts_sound: 'st_notifications/st_notification2.wav'
          tts_message: "The time, is 12pm."

### 5pm
  - alias: flood_5pm
    trigger:
      - platform: time
        at: "16:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          entity_id: group.timebased_flood_lights
          delay: "00:00:05"
          next_scene: 'night_cyan'
          tts_entity_id: group.tts_devices
          tts_sound: 'st_notifications/st_notification2.wav'
          tts_message: "The time, is 5pm."
      - service: input_select.select_option
        data:
          entity_id: input_select.var_lks_timebased
          option: 'night_cyan'

### 7pm
  - alias: flood_7pm
    trigger:
      - platform: time
        after: "18:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "magenta"
          entity_id: group.timebased_flood_lights
          delay: "00:00:05"
          next_scene: night_blue
          tts_entity_id: group.tts_devices
          tts_sound: 'st_notifications/st_notification2.wav'
          tts_message: "The time, is 7pm"
      - service: input_select.select_option
        data:
          entity_id: input_select.var_lks_timebased
          option: 'night_blue'

### 9pm
  - alias: flood_9pm
    trigger:
      - platform: time
        at: "20:59:59"
    action:
      - service: script.notify2
        data:
          flood_color: "red"
          entity_id: group.timebased_flood_lights
          delay: "00:00:05"
          next_scene: night_red
          tts_entity_id: group.tts_devices
          tts_sound: 'st_notifications/st_notification2.wav'
          tts_message: "9pm"
      - service: input_select.select_option
        data:
          entity_id: input_select.var_lks_timebased
          option: 'night_red'



### 11pm
  - alias: timebased_11pm_every_30m
    trigger:
      - platform: time
        at: "23:00:15"
      - platform: time
        minutes: '/30'
        seconds: 00
    condition:
      - condition: time
        after: "23:00:14"
        before: "01:00:00"
      - condition: state
        entity_id: input_boolean.option_delay_timebased_off
        state: 'off'
      - condition: state
        entity_id: input_boolean.var_ps3_on
        state: 'off'
      - condition: state
        entity_id: binary_sensor.entertainment_center_motion_sensor
        state: 'off'
      - condition: template
        value_template: >-
          {% if states.media_player.vtv_chromecast.state != "playing" %}
            true
          {%else%}
            {% if states.media_player.vtv_chromecast.attributes.app_name | lower in states.input_select.array_chromecast_idle_apps | lower %}
              true
            {%else%}
              false
            {%endif%}
          {%endif%}
    action:
      - service: script.entertainment_center_turn_off
      - delay: "00:00:30"
      - service: script.scene2
        data:
          rooms: 'all'
          scene_name: 'night_computer_red'
          transition: 600
      - service: input_select.select_option
        data:
          entity_id: input_select.var_lks_timebased
          option: 'night_computer_red'

### 11pm
  - alias: flood_11pm
    trigger:
      - platform: time
        at: "22:59:58"
    action:
      - service: script.notify2
        data:
          flood_color: "red"
          entity_id: group.timebased_flood_lights
          delay: "00:00:05"
          tts_entity_id: group.tts_devices
          tts_sound: 'st_notifications/st_notification2.wav'
          tts_message: "11pm"

### 12am
  - alias: timebased_12am
    trigger:
      - platform: time
        after: "23:59:58"
    action:
      - service: script.notify2
        data:
          flood_color: "red"
          entity_id: group.timebased_flood_lights
          delay: "00:00:05"
          tts_entity_id: group.tts_devices
          tts_sound: 'st_notifications/st_notification2.wav'
          tts_message: "12am"

##########################################
########## AUTOMATIONS ###################
##########################################

#********** Timebased Option Automations ****************************#
# Due to code limitation... turning off timebased scenese will also turn off light notifications. (Light notificaitons need LKS to work)
  - alias: timebased_light_scene_turn_off
    trigger:
      - platform: state
        entity_id: input_boolean.option_timebased_light_scene
        state: 'off'
    action:
      - service: homeassistant.turn_off
        entity_id: input_boolean.option_notify2_lights

  - alias: timebased_light_scene_turn_on
    trigger:
      - platform: state
        entity_id: input_boolean.option_timebased_light_scene
        state: 'on'
    action:
      - service: homeassistant.turn_on
        entity_id: input_boolean.option_notify2_lights

##########################################
########## SCRIPTS #######################
##########################################
script:

#Find all
  timebased_scene:
    sequence:
      - service: script.timebased_530am
      - service: script.timebased_pre_sunset_day
      - service: script.timebased_5pm
      - service: script.timebased_7pm
      - service: script.timebased_9pm
      - service: script.timebased_12am
      - service: script.timebased_off

# Sunrise to Pre-Sunset
  timebased_530am:
    sequence:
      - condition: time
        after: '05:30:00'
        before: '07:30:00'
      - condition: sun
        before: sunset
        before_offset: "-03:45:00"
      - service: script.scene2
        data:
          rooms: 'all'
          scene_name: 'day'
          transition: 1
      - service: script.turn_off
        entity_id: script.timebased_scene
      - service: input_select.select_option
        data:
          entity_id: input_select.var_lks_timebased
          option: 'day'

# Sunrise to Pre-Sunset
  timebased_pre_sunset_day:
    sequence:
      - condition: time
        after: '05:30:00'
        before: '19:00:00'
      - condition: sun
        before: sunset
      - condition: sun
        after: sunset
        after_offset: "-03:45:00"
      - service: script.scene2
        data:
          rooms: 'all'
          scene_name: 'day'
          transition: 1
      - service: script.turn_off
        entity_id: script.timebased_scene
      - service: input_select.select_option
        data:
          entity_id: input_select.var_lks_timebased
          option: 'day'
# 5pm
  timebased_5pm:
    sequence:
      - condition: time
        after: '17:00:00'
        before: '18:59:59'
      - service: script.scene2
        data:
          rooms: 'all'
          scene_name: 'night_cyan'
          transition: 1
      - service: script.turn_off
        entity_id: script.timebased_scene
      - service: input_select.select_option
        data:
          entity_id: input_select.var_lks_timebased
          option: 'night_cyan'

# 7pm
  timebased_7pm:
    sequence:
      - condition: time
        after: '19:00:00'
        before: '20:59:59'
      - service: script.scene2
        data:
          rooms: 'all'
          scene_name: 'night_blue'
          transition: 1
      - service: script.turn_off
        entity_id: script.timebased_scene
      - service: input_select.select_option
        data:
          entity_id: input_select.var_lks_timebased
          option: 'night_blue'

# 9pm
  timebased_9pm:
    sequence:
      - condition: time
        after: '21:00:00'
      - service: script.scene2
        data:
          rooms: 'all'
          scene_name: 'night_red'
          transition: 1
      - service: script.turn_off
        entity_id: script.timebased_scene
      - service: input_select.select_option
        data:
          entity_id: input_select.var_lks_timebased
          option: 'night_red'

# 11pm
  timebased_12am:
    sequence:
      - condition: time
        after: '23:59:59'
      - service: script.scene2
        data:
          rooms: 'all'
          scene_name: 'night_computer_red'
          transition: 1
      - service: script.turn_off
        entity_id: script.timebased_scene
      - service: input_select.select_option
        data:
          entity_id: input_select.var_lks_timebased
          option: 'night_computer_red'

# 00:00 PM to 5:30 AM
  timebased_off:
    sequence:
      - condition: time
        after: '01:00:00'
        before: '05:29:00'
      - service: script.scene2
        data:
          rooms: 'all'
          scene_name: 'off'
          transition: 1
      - service: script.turn_off
        entity_id: script.timebased_scene
      - service: input_select.select_option
        data:
          entity_id: input_select.var_lks_timebased
          option: 'off'

  all_off:
    sequence:
      # TTS Confrimation
      - service: script.notify2
        data_template:
          flash_color: "red"
          entity_id: group.hourly_flash_lights
          tts_message: >
            OK. The lights will fade off in 3 minutes, and all other devices, have been turned off!
            {% if states.input_boolean.option_morning_alarm.state == 'on' %}
              Your morning alarm is set for {{ states.input_select.option_morning_alarm_time.state[:2] | int }}
              {% if states.input_select.option_morning_alarm_time.state[3:] | int > 1 -%}
                {{ states.input_select.option_morning_alarm_time.state[3:] }}
              {%- endif -%}
            {%- endif %}
             am.
            Good night!
      - delay: "00:00:02"

      # PS3 Off
      - service: input_boolean.turn_off
        entity_id: input_boolean.var_ps3_on

      # Chromecast Off
      - service: media_player.turn_off
        entity_id: media_player.vtv_chromecast

      # Entertainment_Center Off
      - service: switch.turn_off
        entity_id: switch.sonoff_entertainment_center

      # Computer Screens Off
      - service: shell_command.computer_monitors_turn_off

      # Ligts Off
      - delay: "00:00:10"
      - service: script.scene2
        data:
          rooms: 'all'
          scene_name: 'off'
          transition: 180


input_boolean:
##########################################
########## OPTIONS #######################
##########################################
  option_delay_timebased_off:
    name: "Delay turning lights off until 3am"

  option_timebased_light_scene:
    name: "Use Time-based light scenes"
    initial: on

##########################################
############### GROUPS ###################
##########################################
group:
  automation_timebased:
    entities:
      - automation.hourly_flash_lights
      - automation.timebased_530am
      - automation.timebased_day
      - automation.timebased_1230am_every_30m
      - automation.timebased_1am_off
      - automation.timebased_2am_off
      - automation.timebased_3am_off
      - automation.flood_530am
      - automation.flood_7am
      - automation.flood_12pm
      - automation.flood_5pm
      - automation.flood_7pm
      - automation.flood_9pm
      - automation.flood_11pm
      - automation.timebased_11pm_every_30m
      - automation.timebased_12am
      - automation.timebased_12am_every_15m
      - automation.timebased_light_scene_turn_off
      - automation.timebased_light_scene_turn_on

  script_timebased:
    entities:
      - script.timebased_scene
      - script.timebased_530am
      - script.timebased_pre_sunset_day
      - script.timebased_5pm
      - script.timebased_7pm
      - script.timebased_9pm
      - script.timebased_12am
      - script.timebased_off
      - script.all_off
